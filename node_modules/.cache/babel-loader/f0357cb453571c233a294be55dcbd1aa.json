{"ast":null,"code":"import axios from 'axios';\nexport const setNotes = notes => ({\n  type: 'SET_NOTES',\n  notes\n});\nexport const setNoteID = noteID => ({\n  type: 'SET_NOTE_ID',\n  noteID\n});\nexport const setNewNotes = newNotes => ({\n  type: 'SET_NEW_NOTES',\n  newNotes\n});\nexport const setEmail = email => ({\n  type: 'SET_EMAIL',\n  email\n});\nexport const setContent = content => ({\n  type: 'SET_CONTENT',\n  content\n});\nexport const setPreviousNotes = previousNotes => ({\n  type: 'SET_PREVIOUS_NOTES',\n  previousNotes\n});\nexport const setUsername = username => ({\n  type: 'SET_CONTENT',\n  username\n});\nexport const setIsNoteAdded = isNoteAdded => ({\n  type: 'SET_IS_NOTE_ADDED',\n  isNoteAdded\n});\nexport const setIsEditClicked = isEditClicked => ({\n  type: 'SET_IS_EDIT_CLICKED',\n  isEditClicked\n});\nexport const setIsEditSubmitted = isEditSubmitted => ({\n  type: 'SET_IS_EDIT_SUBMITTED',\n  isEditSubmitted\n});\nexport const getAllNotes = () => (dispatch, getState) => {\n  axios.get('/service2/notes').then(res => {\n    console.log(res.data);\n    dispatch(setNotes(res.data));\n  }).then(console.log);\n};\nexport const updateNote = () => (dispatch, getState) => {\n  const _getState$notesReduce = getState().notesReducer,\n        newNotes = _getState$notesReduce.newNotes,\n        noteID = _getState$notesReduce.noteID;\n  axios.get(\"/service2/update?id=\".concat(noteID, \"&notes=\").concat(newNotes)).then(response => {\n    console.log(response);\n  }).catch(err => {\n    console.log('error: ' + err);\n  });\n};\nexport const addNotes = () => (dispatch, getState) => {\n  const content = getState().notesReducer.content;\n  const _getState$loginReduce = getState().loginReducer,\n        email = _getState$loginReduce.email,\n        username = _getState$loginReduce.username;\n  return axios.post('/service2/newNotes', {\n    content: content,\n    username: username,\n    email: email\n  }).then(response => {\n    if (response.data.response) {\n      dispatch(setEmail(response.data.email));\n      return true;\n    } else {\n      return false;\n    }\n  }).catch(err => {\n    console.log('error: ' + err);\n  });\n};","map":{"version":3,"sources":["/Users/macx/Desktop/final-project-superteam/version_1/src/redux/actions/notesActions.js"],"names":["axios","setNotes","notes","type","setNoteID","noteID","setNewNotes","newNotes","setEmail","email","setContent","content","setPreviousNotes","previousNotes","setUsername","username","setIsNoteAdded","isNoteAdded","setIsEditClicked","isEditClicked","setIsEditSubmitted","isEditSubmitted","getAllNotes","dispatch","getState","get","then","res","console","log","data","updateNote","notesReducer","response","catch","err","addNotes","loginReducer","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const setNotes = notes => ({ \n    type: 'SET_NOTES',\n    notes,\n});\nexport const setNoteID = noteID => ({\n    type: 'SET_NOTE_ID',\n    noteID,\n});\nexport const setNewNotes = newNotes => ({ \n    type: 'SET_NEW_NOTES',\n    newNotes,\n});\nexport const setEmail = email => ({\n    type: 'SET_EMAIL',\n    email,\n});\nexport const setContent = content => ({ \n    type: 'SET_CONTENT',\n    content,\n});\nexport const setPreviousNotes = previousNotes => ({ \n    type: 'SET_PREVIOUS_NOTES',\n    previousNotes,\n});\n\nexport const setUsername = username => ({ \n    type: 'SET_CONTENT',\n    username,\n});\n\nexport const setIsNoteAdded = isNoteAdded => ({ \n    type: 'SET_IS_NOTE_ADDED',\n    isNoteAdded,\n});\n\nexport const setIsEditClicked = isEditClicked => ({\n    type: 'SET_IS_EDIT_CLICKED',\n    isEditClicked,\n});\nexport const setIsEditSubmitted = isEditSubmitted => ({\n    type: 'SET_IS_EDIT_SUBMITTED',\n    isEditSubmitted,\n});\n\nexport const getAllNotes = () => (dispatch, getState) => {\n    axios.get('/service2/notes')\n    .then((res) => {\n        console.log(res.data)\n        dispatch(setNotes(res.data))\n    })\n    .then(console.log);\n}\n\nexport const updateNote = () => (dispatch, getState) => {\n    const { newNotes, noteID } = getState().notesReducer;\n    axios.get(`/service2/update?id=${noteID}&notes=${newNotes}`)\n        .then(response => { \n            console.log(response);\n        })\n        .catch(err => {\n            console.log('error: ' + err);\n        })\n}\n\nexport const addNotes = () => (dispatch, getState) => {\n    const { content } = getState().notesReducer;\n    const { email, username } = getState().loginReducer;\n    return axios.post('/service2/newNotes', {\n        content: content,\n        username: username,\n        email: email\n    })\n    .then(response => {\n        if(response.data.response){\n            dispatch(setEmail(response.data.email))\n            return true;\n        }else{\n            return false;\n        }\n    })\n    .catch(err => {\n        console.log('error: '+ err);\n    });\n}\n\n\n\n\n\n\n\n\n\n  "]},"metadata":{},"sourceType":"module"}