{"ast":null,"code":"var _jsxFileName = \"/Users/macx/Desktop/final-project-superteam/version_1/src/pages/Notes.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\nimport { getAllNotes, setIsNoteAdded, setIsEditClicked, setNoteID, setIsEditSubmitted, setPreviousNotes } from '../redux/actions/notesActions';\nimport EditNote from './EditNote';\n\nconst Notes = ({\n  dispatch,\n  notes,\n  isNoteAdded,\n  isLoggedIn,\n  username,\n  isEditClicked,\n  isEditSubmitted\n}) => {\n  useEffect(() => {\n    dispatch(getAllNotes());\n    dispatch(setIsNoteAdded(false)); //reset after new notes have been created\n\n    dispatch(setIsEditSubmitted(false));\n  }, [isNoteAdded, isEditSubmitted]); //update each time isNotesAdded changes\n\n  const editClick = (e, id, content) => {\n    //click counts can be added here\n    e.preventDefault();\n    dispatch(setNoteID(id));\n    dispatch(setPreviousNotes(content));\n    dispatch(setIsEditClicked(true));\n  };\n\n  const editButton = (id, content) => React.createElement(Button, {\n    variant: \"outline-danger\",\n    size: \"sm\",\n    style: {\n      fontSize: '9px',\n      float: 'right',\n      display: 'inline-block'\n    },\n    onClick: e => editClick(e, id, content),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"edit\");\n\n  const showAllNotes = React.createElement(Container, {\n    className: \"mt-3 col-sm-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, notes.map((note, i) => React.createElement(Col, {\n    key: i,\n    className: \"mb-3 col-sm-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      margin: '4px 4px 4px 4px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    style: {\n      fontSize: '12px',\n      display: 'inline-block'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Posted by \", note.username, \" at \", note.dateCreated, \" \"), isLoggedIn && note.username === username ? editButton(note._id, note.content) : null), React.createElement(\"div\", {\n    style: {\n      margin: '4px 4px 4px 4px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, note.content))))).reverse()\n  /*print the most recent added notes first*/\n  ));\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, isEditClicked ? React.createElement(EditNote, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }) : showAllNotes);\n};\n\nconst mapStateToProps = state => ({\n  notes: state.notesReducer.notes,\n  email: state.notesReducer.email,\n  isEditClicked: state.notesReducer.isEditClicked,\n  isEditSubmitted: state.notesReducer.isEditSubmitted,\n  isNoteAdded: state.notesReducer.isNoteAdded,\n  previousNotes: state.notesReducer.previousNotes,\n  noteID: state.notesReducer.noteID,\n  isLoggedIn: state.loginReducer.isLoggedIn,\n  username: state.loginReducer.username\n});\n\nexport default connect(mapStateToProps)(Notes);","map":{"version":3,"sources":["/Users/macx/Desktop/final-project-superteam/version_1/src/pages/Notes.js"],"names":["React","useEffect","connect","Card","Container","Row","Col","Button","getAllNotes","setIsNoteAdded","setIsEditClicked","setNoteID","setIsEditSubmitted","setPreviousNotes","EditNote","Notes","dispatch","notes","isNoteAdded","isLoggedIn","username","isEditClicked","isEditSubmitted","editClick","e","id","content","preventDefault","editButton","fontSize","float","display","showAllNotes","map","note","i","margin","dateCreated","_id","reverse","mapStateToProps","state","notesReducer","email","previousNotes","noteID","loginReducer"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\nimport { getAllNotes, setIsNoteAdded, setIsEditClicked, setNoteID, setIsEditSubmitted, setPreviousNotes } from '../redux/actions/notesActions';\nimport EditNote from './EditNote';\n\nconst Notes = ({ dispatch, notes, isNoteAdded, isLoggedIn, username, isEditClicked, isEditSubmitted }) => {\n\n    useEffect(() => {\n        dispatch(getAllNotes());\n        dispatch(setIsNoteAdded(false));//reset after new notes have been created\n        dispatch(setIsEditSubmitted(false));\n    }, [isNoteAdded, isEditSubmitted]);//update each time isNotesAdded changes\n\n    const editClick = (e, id, content) => {\n        //click counts can be added here\n        e.preventDefault();\n        dispatch(setNoteID(id));\n        dispatch(setPreviousNotes(content));\n        dispatch(setIsEditClicked(true));\n    }\n\n    const editButton = (id, content) => (\n        <Button \n            variant=\"outline-danger\" \n            size='sm'\n            style={{fontSize:'9px', float: 'right', display:'inline-block'}}\n            onClick={ e => editClick(e, id, content)}\n        >\n            edit\n        </Button>\n    )\n\n    const showAllNotes = (\n        <Container className='mt-3 col-sm-8'>\n            <Row>\n                {notes.map((note, i) => (\n                    <Col key={i} className='mb-3 col-sm-12'>\n                        <Card>\n                            <div style={{margin: '4px 4px 4px 4px'}}>\n                                <p style={{fontSize:'12px', display:'inline-block'}}>Posted by {note.username} at {note.dateCreated} </p>\n                                {isLoggedIn && note.username === username? editButton(note._id, note.content) : null}\n                            </div>\n                            <div style={{margin: '4px 4px 4px 4px'}}>\n                                <p>{note.content}</p>\n                            </div>\n                        </Card>\n                    </Col>\n                )).reverse() /*print the most recent added notes first*/}\n            </Row>\n        </Container>   \n    )\n\n    return (\n        <Container>\n            {isEditClicked? <EditNote/> : showAllNotes}\n        </Container>\n    )\n}\n\nconst mapStateToProps = state => ({\n    notes: state.notesReducer.notes,\n    email: state.notesReducer.email,\n    isEditClicked: state.notesReducer.isEditClicked,\n    isEditSubmitted: state.notesReducer.isEditSubmitted,\n    isNoteAdded: state.notesReducer.isNoteAdded,\n    previousNotes: state.notesReducer.previousNotes,\n    noteID: state.notesReducer.noteID,\n    isLoggedIn: state.loginReducer.isLoggedIn,\n    username: state.loginReducer.username,\n});\n\nexport default connect(mapStateToProps)(Notes);"]},"metadata":{},"sourceType":"module"}