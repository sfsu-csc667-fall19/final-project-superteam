version: '3.7'
services:
  redis:
    image: redis:5.0.4
    ports:
      - "6379:6379"
    deploy:
      placement:
        constraints: [node.role == manager]
    # hostname: redis
    # command: ["redis-server", "--append-only", "yes"]
    # command: ["redis-server"]
    command: ["redis-server", "--bind", "redis", "--port", "6379"]
    networks:
      - webnet
  mongo:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - webnet
    deploy:
      restart_policy: 
        condition: on-failure
      # resources:
      #   limits:
      #     cpus: '0.5'
      #     memory: 200M
  frontend:
    image: jordancarlson/frontend
    ports:
      - "3000:3000"
    networks:
      - webnet
    environment:
      - REDIS_HOST=redis
    # depends_on:
    #   - mongo
    #   # - gateway
    #   # - websocket
    #   # - messenger
    #   # - users
    #   - redis
    deploy:
      restart_policy:
        condition: on-failure
      replicas: 1
    #   resources:
    #     limits:
    #       cpus: '0.001'
    #       memory: 50M
      
  gateway:
    image: jordancarlson/gateway
    ports: ["4000:4000"]
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    environment:
      - USERS_HOST=http://users:3001
      - MESSENGER_HOST=http://messenger:3002
      - WEBSOCKET_HOST=http://websocket:3003
      - FRONTEND_HOST=http://frontend:3000
    networks:
      - webnet
  users:
    image: jordancarlson/users
    ports: ["3001:3001"]
    networks:
      - webnet
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    depends_on:
      - mongo
      - redis
    environment:
      - MONGO_HOST=mongodb://mongo:27017
      - REDIS_HOST=redis
  messenger:
    image: jordancarlson/messenger
    ports: ["3002:3002"]
    networks:
      - webnet
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    depends_on:
      - mongo
      - redis
    environment:
      - MONGO_HOST=mongodb://mongo:27017
      - REDIS_HOST=redis
  websocket:
    image: jordancarlson/websocket
    ports: ["3003:3003"]
    networks:
      - webnet
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
networks:
  webnet:
  